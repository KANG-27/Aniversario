---
const { src = "/audio/tu-cancion.mp3", title = "Canci√≥n para ti üíñ" } = Astro.props;
---

<audio id="ap-audio" src={src} preload="metadata"></audio>

<div class="ap-player" role="region" aria-label="Reproductor de audio rom√°ntico">
  <button id="ap-play" class="ap-btn" aria-label="Reproducir">‚ñ∂</button>

  <div class="ap-info">
    <div class="ap-title">{title}</div>
    <div class="ap-bar">
      <input id="ap-seek" class="ap-seek" type="range" min="0" value="0" step="0.1" />
      <div class="ap-time">
        <span id="ap-current">0:00</span> / <span id="ap-duration">0:00</span>
      </div>
    </div>
  </div>

  <button id="ap-mute" class="ap-icon" aria-label="Silenciar">üîà</button>
  <input id="ap-vol" class="ap-vol" type="range" min="0" max="1" step="0.01" value="0.8" aria-label="Volumen" />
  <button id="ap-loop" class="ap-icon" aria-label="Repetir">üîÅ</button>
</div>

<!-- Bot√≥n de inicio para ‚Äúautoplay con gesto‚Äù -->
<button id="ap-starter" class="ap-starter" aria-label="Reproducir m√∫sica">
  üéµ Reproducir m√∫sica
</button>

<style>
  :root{
    --ap-pink:#d96a76;         /* rosa texto/bot√≥n */
    --ap-pink-2:#e68a93;       /* rosa claro */
    --ap-bg:#FBEFEF;           /* fondo rom√°ntico */
    --ap-dark:#6f3d44;
  }

  /* Bot√≥n inicial (obliga gesto del usuario) */
  .ap-starter{
    position: fixed;
    left: 50%;
    bottom: 96px;               /* un poco sobre el player */
    transform: translateX(-50%);
    background: var(--ap-pink);
    color: #fff;
    border: 0;
    padding: 12px 18px;
    border-radius: 999px;
    font-weight: 700;
    box-shadow: 0 8px 24px rgba(0,0,0,.16);
    cursor: pointer;
    z-index: 10001;
  }

  /* Player fijo abajo, centrado */
  .ap-player{
    position: fixed;
    left: 50%;
    bottom: 20px;
    transform: translateX(-50%);
    width: min(820px, 92vw);
    display: grid;
    grid-template-columns: auto 1fr auto auto auto;
    gap: 12px;
    align-items: center;

    padding: 12px 16px;
    border-radius: 20px;
    background: linear-gradient(180deg, rgba(255,255,255,.9), rgba(255,255,255,.85));
    backdrop-filter: blur(10px);
    box-shadow: 0 10px 30px rgba(0,0,0,.18);
    z-index: 10000;
    border: 1px solid rgba(217,106,118,.25);
  }

  .ap-btn{
    background: var(--ap-pink);
    color:#fff;
    border: 0;
    width: 44px; height: 44px;
    border-radius: 999px;
    font-size: 18px;
    cursor: pointer;
    box-shadow: 0 6px 16px rgba(217,106,118,.35);
  }
  .ap-btn:active{ transform: scale(.98) translateX(-0); }

  .ap-info{ display: grid; gap: 6px; }
  .ap-title{
    font-weight: 800;
    color: var(--ap-dark);
    letter-spacing: .2px;
  }

  .ap-bar{ display: grid; grid-template-columns: 1fr auto; gap: 8px; align-items: center; }
  .ap-seek{
    appearance: none;
    height: 6px;
    border-radius: 999px;
    background: linear-gradient(90deg, var(--ap-pink) 0%, var(--ap-pink-2) 100%);
    outline: none;
  }
  .ap-seek::-webkit-slider-thumb{
    appearance: none; width: 14px; height: 14px; border-radius: 999px; background:#fff; border:2px solid var(--ap-pink);
  }
  .ap-time{ color:#8a666a; font-size:.85rem; min-width:90px; text-align:right; }

  .ap-icon{
    background: transparent;
    border: 0;
    font-size: 18px;
    cursor: pointer;
    color: var(--ap-dark);
    padding: 6px 8px;
    border-radius: 10px;
  }
  .ap-icon.active{ background: rgba(217,106,118,.12); }

  .ap-vol{
    width: 90px;
    appearance: none;
    height: 6px;
    border-radius: 999px;
    background: rgba(217,106,118,.25);
  }
  .ap-vol::-webkit-slider-thumb{
    appearance: none; width: 14px; height: 14px; border-radius: 999px; background:#fff; border:2px solid var(--ap-pink);
  }

  @media (max-width: 560px){
    .ap-player{ grid-template-columns: auto 1fr auto; }
    .ap-vol{ display:none; }
    #ap-duration{ display:none; }
  }
</style>

<script is:inline>
  const $ = (id) => document.getElementById(id);
  const audio = $("ap-audio");
  const play  = $("ap-play");
  const seek  = $("ap-seek");
  const cur   = $("ap-current");
  const dur   = $("ap-duration");
  const mute  = $("ap-mute");
  const vol   = $("ap-vol");
  const loop  = $("ap-loop");
  const starter = $("ap-starter");

  const fmt = (s) => {
    if (!isFinite(s)) return "0:00";
    const m = Math.floor(s/60);
    const r = Math.floor(s%60).toString().padStart(2,"0");
    return `${m}:${r}`;
  };

  // Bot√≥n de inicio (gesto requerido)
  starter?.addEventListener("click", async () => {
    try {
      await audio.play();
      play.textContent = "‚è∏";
      starter.remove();               // ocultar el bot√≥n inicial
    } catch (e) {
      console.warn("No se pudo iniciar audio:", e);
    }
  });

  play.addEventListener("click", async () => {
    if (audio.paused) {
      try { await audio.play(); play.textContent = "‚è∏"; }
      catch(e){ console.warn(e); }
    } else {
      audio.pause(); play.textContent = "‚ñ∂";
    }
  });

  audio.addEventListener("loadedmetadata", () => {
    dur.textContent = fmt(audio.duration);
    seek.max = audio.duration || 0;
  });

  audio.addEventListener("timeupdate", () => {
    if (!seek.matches(":active")) seek.value = audio.currentTime;
    cur.textContent = fmt(audio.currentTime);
  });

  seek.addEventListener("input", () => audio.currentTime = Number(seek.value || 0));

  mute.addEventListener("click", () => {
    audio.muted = !audio.muted;
    mute.textContent = audio.muted ? "üîá" : "üîà";
  });

  vol.addEventListener("input", () => {
    audio.volume = Number(vol.value);
    if (audio.volume === 0) { audio.muted = true; mute.textContent = "üîá"; }
    else { audio.muted = false; mute.textContent = "üîà"; }
  });

  loop.addEventListener("click", () => {
    audio.loop = !audio.loop;
    loop.classList.toggle("active", audio.loop);
  });

  // Peque√±o guardado de estado (opcional)
  document.addEventListener("visibilitychange", () => {
    if (document.hidden && !audio.paused) sessionStorage.setItem("ap_playing","1");
    else sessionStorage.removeItem("ap_playing");
  });
</script>
